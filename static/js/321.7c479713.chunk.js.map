{"version":3,"file":"static/js/321.7c479713.chunk.js","mappings":"+NAYIA,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,MAAOF,EAAAA,KAAaE,QAAQC,WAC5BC,SAAUJ,EAAAA,KAAaG,aAGV,SAASE,EAAT,GAA6D,IAA5CC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,cACxD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAoBA,OAJAC,EAAAA,EAAAA,YAAU,WACRC,aAAaC,QAAQ,QAASC,KAAKC,UAAUV,GAC9C,GAAE,CAACA,KAGF,SAAC,KAAD,CACEW,SApBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BR,GAAgB,IAEhBS,EAAAA,EAAAA,IAAMF,GACHG,MAAK,SAAAC,GACJH,IACAZ,EAASe,EAAKhB,OACdD,EAAQiB,EAAKC,KAAKC,MAClBhB,GAAc,GACdG,GAAgB,EACjB,IACAc,OAAM,SAAAC,GAAW,GACrB,EASGC,cAAe,CACb1B,MAAO,GACPE,SAAU,IAEZyB,iBAAkB9B,EANpB,UAQE,UAAC,KAAD,YACE,UAAC,KAAD,CAAO+B,QAAQ,QAAf,WACE,qCACA,SAAC,KAAD,CAAaL,KAAK,QAAQM,KAAK,OAAOC,YAAY,OAClD,SAAC,KAAD,CAAgBC,UAAU,MAAMR,KAAK,cAGvC,UAAC,KAAD,CAAOK,QAAQ,WAAf,WACE,yCACA,SAAC,KAAD,CACEL,KAAK,WACLM,KAAK,WACLC,YAAY,IACZE,aAAa,SAEf,SAAC,KAAD,CAAgBD,UAAU,MAAMR,KAAK,iBAGvC,SAAC,KAAD,CAAQM,KAAK,SAASI,SAAUxB,EAAhC,uBAMP,C,+UCnEYyB,GAAUC,EAAAA,EAAAA,GAAO,MAAPA,CAAH,0QAcPC,EAASD,EAAAA,EAAAA,IAAH,iHAQNE,EAAUF,EAAAA,EAAAA,IAAH,gNAUPG,EAAUH,EAAAA,EAAAA,IAAH,mGAMPI,GAAWJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,0UAmBRM,GAAaN,EAAAA,EAAAA,GAAOO,EAAAA,GAAPP,CAAH,kJASVQ,GAAcR,EAAAA,EAAAA,GAAOS,EAAAA,GAAPT,CAAH,4FAQXU,EAAQV,EAAAA,EAAAA,MAAH,yHAOLW,GAAiBX,EAAAA,EAAAA,GAAOY,EAAAA,GAAPZ,CAAH,6KAUda,EAASb,EAAAA,EAAAA,OAAH,uW","sources":["components/Login/Login.js","components/Login/Login.styled.jsx"],"sourcesContent":["import {\n  StyledForm,\n  StyledField,\n  Label,\n  StyledErrorMsg,\n  Button,\n} from './Login.styled';\nimport { Formik } from 'formik';\nimport { login } from 'utils/operations';\nimport * as yup from 'yup';\nimport { useState, useEffect } from 'react';\n\nlet schema = yup.object().shape({\n  email: yup.string().email().required(),\n  password: yup.string().required(),\n});\n\nexport default function Login({ setUser, token, setToken, setIsLoggedIn }) {\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = (values, { resetForm }) => {\n    setIsProcessing(true);\n\n    login(values)\n      .then(data => {\n        resetForm();\n        setToken(data.token);\n        setUser(data.user.name);\n        setIsLoggedIn(true);\n        setIsProcessing(false);\n      })\n      .catch(error => {});\n  };\n\n  useEffect(() => {\n    localStorage.setItem('token', JSON.stringify(token));\n  }, [token]);\n\n  return (\n    <Formik\n      onSubmit={handleSubmit}\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validationSchema={schema}\n    >\n      <StyledForm>\n        <Label htmlFor=\"email\">\n          <span>email</span>\n          <StyledField name=\"email\" type=\"text\" placeholder=\" \"></StyledField>\n          <StyledErrorMsg component=\"div\" name=\"email\" />\n        </Label>\n\n        <Label htmlFor=\"password\">\n          <span>password </span>\n          <StyledField\n            name=\"password\"\n            type=\"password\"\n            placeholder=\" \"\n            autoComplete=\"off\"\n          ></StyledField>\n          <StyledErrorMsg component=\"div\" name=\"password\" />\n        </Label>\n\n        <Button type=\"submit\" disabled={isProcessing}>\n          Login\n        </Button>\n      </StyledForm>\n    </Formik>\n  );\n}\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\nimport { NavLink } from 'react-router-dom';\n\nexport const HomeBox = styled('div')`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translateY(-50%) translateX(-50%);\n  height: 300px;\n\n  @media screen and (min-width: 768px) {\n    width: 720px;\n    display: flex;\n    justify-content: space-between;\n  }\n`;\n\nexport const ImgBox = styled.div`\n  width: 300px;\n\n  @media screen and (max-width: 767.98px) {\n    display: none;\n  }\n`;\n\nexport const FormBox = styled.div`\n  width: 360px;\n  height: 300px;\n  background-color: white;\n  border: 1px solid #212121;\n  border-radius: 8px;\n  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.8);\n  overflow: hidden;\n`;\n\nexport const LinkBox = styled.div`\n  display: flex;\n  justify-content: space-around;\n  text-align: center;\n`;\n\nexport const MenuLink = styled(NavLink)`\n  width: 50%;\n  padding: 16px 0;\n  font-size: 16px;\n  font-weight: 700;\n  color: #212121;\n  border-bottom: 1px solid #212121;\n  text-decoration: none;\n  transition: background-color 250ms linear;\n\n  &.active {\n    background-color: darkgrey;\n  }\n\n  :hover {\n    background-color: grey;\n  }\n`;\n\nexport const StyledForm = styled(Form)`\n  padding: 16px 24px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n\n  height: 248px;\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 4px 8px;\n\n  :focus-visible {\n    outline: none;\n  }\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  font-weight: 600;\n`;\n\nexport const StyledErrorMsg = styled(ErrorMessage)`\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  transform: translatey(100%);\n  font-size: 10px;\n  background-color: white;\n  color: #212121;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  width: 100%;\n  padding: 8px;\n  font-size: 16px;\n  font-weight: 600;\n  border-radius: 4px;\n  border: none;\n  margin: 0 auto;\n  background-color: darkgrey;\n  transition: background-color 250ms linear;\n\n  :hover,\n  :focus {\n    background-color: grey;\n  }\n\n  :focus-visible {\n    outline: none;\n  }\n`;\n"],"names":["schema","yup","shape","email","required","password","Login","setUser","token","setToken","setIsLoggedIn","useState","isProcessing","setIsProcessing","useEffect","localStorage","setItem","JSON","stringify","onSubmit","values","resetForm","login","then","data","user","name","catch","error","initialValues","validationSchema","htmlFor","type","placeholder","component","autoComplete","disabled","HomeBox","styled","ImgBox","FormBox","LinkBox","MenuLink","NavLink","StyledForm","Form","StyledField","Field","Label","StyledErrorMsg","ErrorMessage","Button"],"sourceRoot":""}