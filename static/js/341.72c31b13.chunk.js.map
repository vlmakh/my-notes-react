{"version":3,"file":"static/js/341.72c31b13.chunk.js","mappings":"uJAEaA,E,QAASC,EAAAA,IAAH,0O,4ICCNC,EAAUD,EAAAA,EAAAA,IAAH,iEAKPE,GAAaF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,6KAYVI,GAAcJ,EAAAA,EAAAA,GAAOK,EAAAA,GAAPL,CAAH,6CAIXM,EAAQN,EAAAA,EAAAA,MAAH,6LAYLO,GAAiBP,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAH,4IAMhB,SAAAS,GAAC,OAAIA,EAAEC,MAAMC,OAAOC,QAAnB,I,oEC1BRC,EAAaC,EAAAA,KAAaC,MAAM,CAClCC,KAAMF,EAAAA,KAAaG,IAAI,GAAGC,aAGxBC,EAAaL,EAAAA,KAAaC,MAAM,CAClCK,SAAUN,EAAAA,KAAaG,IAAI,GAAGC,WAC9BG,gBAAiBP,EAAAA,KAEdQ,MAAM,CAACR,EAAAA,GAAQ,YAAa,MAAO,0BAGzB,SAASS,EAAT,GAAmD,IAA/BC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,MACtD,GAA4CC,EAAAA,EAAAA,WAAS,GAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA4CF,EAAAA,EAAAA,WAAS,GAArD,eAAOG,EAAP,KAAuBC,EAAvB,KA6BA,OACE,iCACIP,IAAc,SAAC,KAAD,CAAUQ,GAAG,OAE7B,UAAC/B,EAAD,YACE,SAAC,KAAD,CACEgC,SAjCiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAClCN,GAAkB,IAElBO,EAAAA,EAAAA,KAAe,kBAAKF,GAAN,IAAcR,MAAAA,KACzBW,MAAK,SAAAC,GACJb,EAAQa,EAAKtB,MACbmB,GACD,IACAI,OAAM,SAAAC,GAAW,IACjBC,SAAQ,WACPZ,GAAkB,EACnB,GACJ,EAsBOa,cAAe,CACb1B,KAAM,IAER2B,iBAAkB9B,EALpB,UAOE,SAACX,EAAD,WACE,UAACI,EAAD,CAAOsC,QAAQ,OAAf,WACE,SAACxC,EAAD,CACEY,KAAK,OACL6B,KAAK,OACLC,YAAY,cAEd,SAACvC,EAAD,CAAgBwC,UAAU,MAAM/B,KAAK,UAErC,SAAC,IAAD,CAAQ6B,KAAK,SAASG,SAAUpB,EAAhC,SACGA,EAAiB,iBAAmB,wBAM7C,SAAC,KAAD,CACEK,SA1CiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAClCJ,GAAkB,IAElBkB,EAAAA,EAAAA,KAAe,kBAAKf,GAAN,IAAcR,MAAAA,KACzBW,MAAK,WACJF,GACD,IACAI,OAAM,SAAAC,GAAW,IACjBC,SAAQ,WACPV,GAAkB,EACnB,GACJ,EAgCOW,cAAe,CACbtB,SAAU,GACVC,gBAAiB,IAEnBsB,iBAAkBxB,EANpB,UAQE,UAACjB,EAAD,YACE,UAACI,EAAD,CAAOsC,QAAQ,WAAf,WACE,SAACxC,EAAD,CACEY,KAAK,WACL6B,KAAK,WACLC,YAAY,eACZI,aAAa,SAEf,SAAC3C,EAAD,CAAgBwC,UAAU,MAAM/B,KAAK,iBAGvC,UAACV,EAAD,CAAOsC,QAAQ,kBAAf,WACE,SAACxC,EAAD,CACEY,KAAK,kBACL6B,KAAK,WACLC,YAAY,sBACZI,aAAa,SAEf,SAAC3C,EAAD,CAAgBwC,UAAU,MAAM/B,KAAK,qBAErC,SAAC,IAAD,CAAQ6B,KAAK,SAASG,SAAUlB,EAAhC,SACGA,EAAiB,iBAAmB,yBAM7C,UAAC,IAAD,CAAYE,GAAG,SAAf,WACE,SAAC,MAAD,CAAoBmB,KAAK,OAD3B,uBAMF,SAACpD,EAAA,EAAD,MAGL,C","sources":["components/Footer/Footer.jsx","components/User/User.styled.jsx","pages/UserPage.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Footer = styled.div`\n  position: fixed;\n  left: 0;\n  bottom: 0;\n  display: flex;\n  \n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 40px;\n  background: grey;\n  color: #ffffff;\n  z-index: 1000;\n`;\n\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const UserBox = styled.div`\n  margin: 60px auto 0;\n  width: 320px;\n`;\n\nexport const UpdateForm = styled(Form)`\n  padding: 16px 4px;\n\n  border-radius: 8px;\n  border: 1px solid grey;\n\n  :nth-of-type(2) {\n    margin-top: 8px;\n    margin-bottom: 8px;\n  }\n`;\n\nexport const StyledField = styled(Field)`\n  padding: 4px 8px;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  font-weight: 600;\n  height: 32px;\n\n  :nth-of-type(2) {\n    margin-top: 16px;\n  }\n`;\n\nexport const StyledErrorMsg = styled(ErrorMessage)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  transform: translatey(100%);\n  font-size: 10px;\n  color: ${p => p.theme.colors.textPrim};\n`;\n","import { Footer } from 'components/Footer/Footer';\nimport {\n  UserBox,\n  UpdateForm,\n  StyledField,\n  Label,\n  StyledErrorMsg,\n} from 'components/User/User.styled';\nimport { Button, ButtonLink } from 'components/Buttons/Buttons';\nimport { Navigate } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { updateUserName, updateUserPass } from 'utils/operations';\nimport * as yup from 'yup';\nimport { useState } from 'react';\nimport { MdOutlineArrowBack } from 'react-icons/md';\n\nlet schemaName = yup.object().shape({\n  name: yup.string().min(4).required(),\n});\n\nlet schemaPass = yup.object().shape({\n  password: yup.string().min(6).required(),\n  passwordConfirm: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match'),\n});\n\nexport default function UserPage({ isLoggedIn, setUser, email }) {\n  const [isNameUpdating, setIsNameUpdating] = useState(false);\n  const [isPassUpdating, setIsPassUpdating] = useState(false);\n\n  const handleUpdateName = (values, { resetForm }) => {\n    setIsNameUpdating(true);\n\n    updateUserName({ ...values, email })\n      .then(data => {\n        setUser(data.name);\n        resetForm();\n      })\n      .catch(error => {})\n      .finally(() => {\n        setIsNameUpdating(false);\n      });\n  };\n\n  const handleUpdatePass = (values, { resetForm }) => {\n    setIsPassUpdating(true);\n\n    updateUserPass({ ...values, email })\n      .then(() => {\n        resetForm();\n      })\n      .catch(error => {})\n      .finally(() => {\n        setIsPassUpdating(false);\n      });\n  };\n\n  return (\n    <>\n      {!isLoggedIn && <Navigate to=\"/\" />}\n\n      <UserBox>\n        <Formik\n          onSubmit={handleUpdateName}\n          initialValues={{\n            name: '',\n          }}\n          validationSchema={schemaName}\n        >\n          <UpdateForm>\n            <Label htmlFor=\"name\">\n              <StyledField\n                name=\"name\"\n                type=\"text\"\n                placeholder=\"New name\"\n              ></StyledField>\n              <StyledErrorMsg component=\"div\" name=\"name\" />\n\n              <Button type=\"submit\" disabled={isNameUpdating}>\n                {isNameUpdating ? 'Please wait...' : 'Update name'}\n              </Button>\n            </Label>\n          </UpdateForm>\n        </Formik>\n\n        <Formik\n          onSubmit={handleUpdatePass}\n          initialValues={{\n            password: '',\n            passwordConfirm: '',\n          }}\n          validationSchema={schemaPass}\n        >\n          <UpdateForm>\n            <Label htmlFor=\"password\">\n              <StyledField\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"New password\"\n                autoComplete=\"off\"\n              ></StyledField>\n              <StyledErrorMsg component=\"div\" name=\"password\" />\n            </Label>\n\n            <Label htmlFor=\"passwordConfirm\">\n              <StyledField\n                name=\"passwordConfirm\"\n                type=\"password\"\n                placeholder=\"Repeat new password\"\n                autoComplete=\"off\"\n              ></StyledField>\n              <StyledErrorMsg component=\"div\" name=\"passwordConfirm\" />\n\n              <Button type=\"submit\" disabled={isPassUpdating}>\n                {isPassUpdating ? 'Please wait...' : 'Update pass'}\n              </Button>\n            </Label>\n          </UpdateForm>\n        </Formik>\n\n        <ButtonLink to=\"/notes\">\n          <MdOutlineArrowBack size=\"24\" />\n          Back to notes\n        </ButtonLink>\n      </UserBox>\n\n      <Footer />\n    </>\n  );\n}\n"],"names":["Footer","styled","UserBox","UpdateForm","Form","StyledField","Field","Label","StyledErrorMsg","ErrorMessage","p","theme","colors","textPrim","schemaName","yup","shape","name","min","required","schemaPass","password","passwordConfirm","oneOf","UserPage","isLoggedIn","setUser","email","useState","isNameUpdating","setIsNameUpdating","isPassUpdating","setIsPassUpdating","to","onSubmit","values","resetForm","updateUserName","then","data","catch","error","finally","initialValues","validationSchema","htmlFor","type","placeholder","component","disabled","updateUserPass","autoComplete","size"],"sourceRoot":""}